Exercise 6 - Tasks
1,
SELECT title, domestic_sales, international_sales 
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
2,
SELECT title, domestic_sales, international_sales
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales;
3,
SELECT title, rating
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
ORDER BY rating DESC;
---------------------------------
Exercise 7 - Tasks
1,
SELECT DISTINCT building FROM employees;
2,
SELECT * FROM buildings;
3,
SELECT DISTINCT building_name, role 
FROM buildings 
  LEFT JOIN employees
    ON building_name = building;
---------------------------------
Exercise 8 - Tasks
1,
SELECT name, role FROM employees
WHERE building IS NULL;
2,
SELECT DISTINCT building_name
FROM buildings 
  LEFT JOIN employees
    ON building_name = building
WHERE role IS NULL;
---------------------------------
Exercise 9 - Tasks
1,
SELECT title, (domestic_sales + international_sales) / 1000000 AS gross_sales_millions
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
2,
SELECT title, rating * 10 AS rating_percent
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
3,
SELECT title, year
FROM movies
WHERE year % 2 = 0;
---------------------------------
Exercise 10 - Tasks
1,
SELECT MAX(years_employed) as Max_years_employed
FROM employees;
2,
SELECT role, AVG(years_employed) as Average_years_employed
FROM employees
GROUP BY role;
3,
SELECT building, SUM(years_employed) as Average_years_employed
FROM employees
GROUP BY building;
---------------------------------
Exercise 11 - Tasks
1,
SELECT role, COUNT(*) as Number_of_artists
FROM employees
WHERE role = "Artist";
2,
SELECT role, COUNT(*)
FROM employees
GROUP BY role;
3,
SELECT role, SUM(years_employed)
FROM employees
GROUP BY role
HAVING role = "Engineer";
---------------------------------
Exercise 12 - Tasks
1,
SELECT director, COUNT(id) as Num_movies_directed
FROM movies
GROUP BY director;
2,
SELECT director, SUM(domestic_sales + international_sales) as Cumulative_sales_from_all_movies
FROM movies
    INNER JOIN boxoffice
        ON movies.id = boxoffice.movie_id
GROUP BY director;
---------------------------------
Exercise 13 - Tasks
1, 
INSERT INTO movies VALUES (4, "Toy Story 4", "El Directore", 2015, 90);
2,
INSERT INTO boxoffice VALUES (4, 8.7, 340000000, 270000000);
---------------------------------
Exercise 14 - Tasks
1,
UPDATE movies
SET director = "John Lasseter"
WHERE id = 2;
2,
UPDATE movies
SET year = 1999
WHERE id = 3;
3,
UPDATE movies
SET title = "Toy Story 3", director = "Lee Unkrich"
WHERE id = 11;
---------------------------------
Exercise 15 - Tasks
1,
DELETE FROM movies
where year < 2005;
2,
DELETE FROM movies
where director = "Andrew Stanton";
---------------------------------
Exercise 16 - Tasks
1,
CREATE TABLE Database (
    Name TEXT,
    Version FLOAT,
    Download_count INTEGER
);
---------------------------------
Exercise 17 - Tasks
1,
ALTER TABLE Movies
  ADD COLUMN Aspect_ratio FLOAT DEFAULT 2.39;
2,
ALTER TABLE Movies
  ADD COLUMN Language TEXT DEFAULT "English";
---------------------------------
Exercise 18 - Tasks
1,
DROP TABLE Movies;
2,
DROP TABLE BoxOffice;